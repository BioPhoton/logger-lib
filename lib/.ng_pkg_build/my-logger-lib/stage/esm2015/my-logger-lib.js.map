{"version":3,"file":"my-logger-lib.js","sources":["../../out/src/logger.module.ts","../../out/src/default-log-formatter.service.ts","../../out/src/logger.service.ts","../../out/src/log-formatter.service.ts","../../out/src/logger-config.ts"],"sourcesContent":["import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LoggerConfig } from './logger-config';\nimport { LoggerService } from './logger.service';\nimport { LogFormatterService } from './log-formatter.service';\nimport { DefaultLogFormatterService } from './default-log-formatter.service';\n\n\nconst defaultFormatterConfig = [{\n  provide: LogFormatterService,\n  useClass: DefaultLogFormatterService\n}];\n\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  providers: [ /* wird bewusst frei gelassen */ ],\n  declarations: [/* MyComponent */],\n  exports: [ /* MyComponent */ ]\n})\nexport class LoggerModule { \n  static forRoot(config: LoggerConfig): ModuleWithProviders {\n    \n    return {\n      ngModule: LoggerModule,\n      providers: [\n        LoggerService,\n        { provide: LoggerConfig, useValue: config},\n        ...(!config.logFormatterImplementation) ?\n           [{provide: LogFormatterService, useClass: DefaultLogFormatterService}] :\n           [{provide: LogFormatterService, useClass: config.logFormatterImplementation }]\n      ]\n    }\n  }\n\n}","import { Injectable } from '@angular/core';\nimport { LogFormatterService } from './log-formatter.service';\n\n@Injectable()\nexport class DefaultLogFormatterService implements LogFormatterService {\n    format(message: string): string {\n        return message;\n    }\n}","import { Injectable } from '@angular/core';\nimport { LoggerConfig } from './logger-config';\nimport { LogFormatterService } from './log-formatter.service';\n\n@Injectable()\nexport class LoggerService {\n\n    constructor(\n        private config: LoggerConfig,\n        private logFormatter: LogFormatterService\n    ) { }\n\n    debug(message: string): void {\n        if (!this.config.enableDebug) return;\n        console.debug(this.logFormatter.format(message));\n    }\n\n    log(message: string): void {\n        console.log(this.logFormatter.format(message));\n    }\n}","\n\nexport abstract class LogFormatterService {\n    abstract format(message: string): string;\n}","import { Injectable } from '@angular/core';\nimport { LogFormatterService } from './log-formatter.service';\n\nexport type LogFormatterServiceType = new () => LogFormatterService;\n\n@Injectable()\nexport abstract class LoggerConfig {\n    enableDebug: boolean;\n    logFormatterImplementation: LogFormatterServiceType\n}"],"names":[],"mappings":";;;;;;;AIAA;;;AAMA,AAAA,MAAA,YAAA,CAAA;;;IADA,EAAA,IAAA,EAAC,UAAU,EAAX;;;;;;;;;;ADHA,AAAA,MAAA,mBAAA,CAAA;CAEC;;;;;;ADJD,AAKA,MAAA,aAAA,CAAA;;;;;IAEI,WAAJ,CACgB,MADhB,EAEgB,YAFhB,EAAA;QACgB,IAAhB,CAAA,MAAsB,GAAN,MAAM,CAAtB;QACgB,IAAhB,CAAA,YAA4B,GAAZ,YAAY,CAA5B;KACS;;;;;IAEL,KAAK,CAAC,OAAe,EAAzB;QACQ,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW;YAAE,OAAO;QACrC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;KACpD;;;;;IAED,GAAG,CAAC,OAAe,EAAvB;QACQ,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;KAClD;;;IAfL,EAAA,IAAA,EAAC,UAAU,EAAX;;;;IAHA,EAAA,IAAA,EAAS,YAAY,GAArB;IACA,EAAA,IAAA,EAAS,mBAAmB,GAA5B;;;;;;;ADFA,AAIA,MAAA,0BAAA,CAAA;;;;;IACI,MAAM,CAAC,OAAe,EAA1B;QACQ,OAAO,OAAO,CAAC;KAClB;;;IAJL,EAAA,IAAA,EAAC,UAAU,EAAX;;;;;;;ADHA,AAsBA,MAAA,YAAA,CAAA;;;;;IACE,OAAO,OAAO,CAAC,MAAoB,EAArC;QAEI,OAAO;YACL,QAAQ,EAAE,YAAY;YACtB,SAAS,EAAE;gBACT,aAAa;gBACb,EAAE,OAAO,EAAE,YAAY,EAAE,QAAQ,EAAE,MAAM,EAAC;gBAC1C,GAAG,CAAC,CAAC,MAAM,CAAC,0BAA0B;oBACnC,CAAC,EAAC,OAAO,EAAE,mBAAmB,EAAE,QAAQ,EAAE,0BAA0B,EAAC,CAAC;oBACtE,CAAC,EAAC,OAAO,EAAE,mBAAmB,EAAE,QAAQ,EAAE,MAAM,CAAC,0BAA0B,EAAE,CAAC;aAClF;SACF,CAAA;KACF;;;IArBH,EAAA,IAAA,EAAC,QAAQ,EAAT,IAAA,EAAA,CAAU;gBACR,OAAO,EAAE;oBACP,YAAY;iBACb;gBACD,SAAS,EAAE,EAAoC;gBAC/C,YAAY,EAAE,EAAmB;gBACjC,OAAO,EAAE,EAAqB;aAC/B,EAAD,EAAA;;;;;;;;;;;;;;;;;;"}